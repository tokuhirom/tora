use Socket *;
use HTTP::Parser *;
use HTTP::Status *;

class HTTP::Server::Simple {
    sub new($host, $port=80) {
        self.bless({host => $host, port => $port});
    }

    sub run($app) {
        my $server = Socket.socket(AF_INET, SOCK_STREAM, 0);
        $server.setsockopt(SOL_SOCKET, SO_REUSEADDR, 1);
        $server.bind(Socket.sockaddr_in(${self}['port'], Socket.inet_aton(${self}['host'])));
        $server.listen(SOMAXCONN);
        while (1) {
            my ($csock, $sockaddr) = $server.accept();
            my $buf = b'';
            while (1) {
                $buf += $csock.read(4068);
                my $headers = {};
                my $ret = parse_http_request($buf, $headers);
                if ($ret == -2) {
                    say("[DEBUG] Incomplete request.");
                } elsif ($ret == -1) {
                    say("[INFO] Broken request.");
                    last;
                } else {
                    # parsed.
                    say("[INFO] Parsed http request.");

                    my $res = $app.($headers);

                    my $code = $res[0];

                    my $content = $buf.substr($ret);
                    my $res_heads = $res[1];

                    my $header = "HTTP/1.0 " + $code + " " + status_message($code) + "\r\n";
                    for (my $i=0; $i<$res_heads.size(); $i+=2) {
                        $header += $res_heads[$i] + " : " + $res_heads[$i+1] + "\r\n";
                    }
                    $header += "\r\n";
                    $csock.write($header);
                    for (my $part in $res[2]) {
                        $csock.write($part);
                    }
                    $csock.close();

                    last;
                }
            }
        }
        $server.close();
    }
}

__END__

HTP::Server::Simple
===================

SYNOPSIS
--------

    use HTTP::Server::Simple;

    my $httpd = HTTP::Server::Simple.new('127.0.0.1', 8080);
    $httpd.run(-> $env {
        return [200, [], ["OK"]];
    });

