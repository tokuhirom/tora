class Test::Builder {
    sub new() {
        self.bless({
            counter => 0,
            failed => 0,
        });
    }
    sub counter() { ${self}[counter] }
    sub incr_counter() {
        ${self}[counter] = ${self}[counter] + 1;
    }
    sub incr_failed() {
        ${self}[failed] = ${self}[failed] + 1;
    }
    sub failed() {
        return ${self}[failed];
    }
    sub ok($b, $msg=undef) {
        if ($b) {
            self.pass($msg);
        } else {
            self.fail($msg);
        }
    }
    sub pass($msg=undef) {
        self.incr_counter();
        print("ok " + self.counter);
        if ($msg!=undef) {
            print(" - " + $msg);
        }
        print("\n");
    }
    sub fail($msg=undef) {
        self.incr_counter();
        my $buf = "not ok " + self.counter;
        if ($msg!=undef) {
            $buf += " " + $msg;
        }
        say($buf);
        self.incr_failed;
    }
    sub is($a, $b, $msg=undef) {
        self.incr_counter;
        if ($a==$b) {
            print("ok " + self.counter);
            # Internals.dump($msg);
            if ($msg != undef) {
                print(" - " + $msg);
            }
            print("\n");
        } else {
            print("not ok " + self.counter);
            if $msg != undef {
                print(" - " + $msg);
            }
            say(" # got:      " + $a);
            say(" # expected: " + $b);
            self.incr_failed;
        }
    }
    sub like($a, $b, $msg=undef) {
        self.incr_counter;
        if ($a.match($b)) {
            print("ok " + self.counter);
            if $msg!=undef {
                print(" - " + $msg);
            }
            print("\n");
        } else {
            print("not ok " + self.counter);
            if $msg!=undef {
                print(" - " + $msg);
            }
            say(" # got:      " + $a);
            say(" # expected: " + $b);
            self.incr_failed;
        }
    }
    sub note($msg) {
        say("# " + $msg);
    }
    sub done_testing() {
        say("1.." + self.counter);
        if (self.counter == 0) {
            say('# No tests run!');
        }
        if (self.failed > 0) {
            # printf("# Looks like you failed %d test of %d.", self.failed, $counter);
        }
    }
}

$Test::More::BUILDER = Test::Builder.new();

sub ok($b, $msg=undef) {
    $Test::More::BUILDER.ok($b, $msg);
}

sub fail($msg=undef) {
    $Test::More::BUILDER.fail($msg);
}

sub is($a, $b, $msg=undef) {
    $Test::More::BUILDER.is($a, $b, $msg);
}

sub like($a, $b, $msg=undef) {
    $Test::More::BUILDER.like($a, $b, $msg);
}

sub note($msg) {
    $Test::More::BUILDER.note($msg);
}

sub done_testing() {
    $Test::More::BUILDER.done_testing();
}

