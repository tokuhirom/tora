my $nodes = qw(
    NODE_INT
    NODE_DOUBLE
    NODE_TRUE
    NODE_FALSE
    NODE_IDENTIFIER
    NODE_TUPLE
    NODE_FUNCALL
    NODE_STRING
    NODE_ADD
    NODE_SUB
    NODE_MUL
    NODE_DIV
    NODE_STMTS
    NODE_STMTS_LIST
    NODE_NEWLINE
    NODE_IF
    NODE_LT
    NODE_GT
    NODE_LE
    NODE_GE
    NODE_EQ
    NODE_GETVARIABLE
    NODE_SETVARIABLE
    NODE_SETVARIABLE_MULTI
    NODE_ASSIGN
    NODE_WHILE
    NODE_ROOT
    NODE_VOID
    NODE_FUNCDEF
    NODE_RETURN
    NODE_BLOCK
    NODE_MY
    NODE_MAKE_ARRAY
    NODE_MAKE_HASH
    NODE_GET_ITEM
    NODE_FOR
    NODE_FOREACH
    NODE_UNARY_NEGATIVE
    NODE_METHOD_CALL
    NODE_UNARY_INCREMENT
    NODE_DIV_ASSIGN
    NODE_RANGE
    NODE_REGEXP
);

# header
{
    my $fh = open('src/nodes.gen.cc', 'w');

    $fh->printf($tmpl,
        > #ifndef NODES_GEN_H_
        > #define NODES_GEN_H_
        > 
        > namespace tora {
        > 
        > typedef enum {
        >     NODE_UNKNOWN = 0,
        > %s} node_type_t;
        > 
        > extern const char*node_type2name[];
        > }
        > #endif // NODES_GEN_H_
        , $nodes.join(", "));
}

# cc
{
    $cc->printf(
        > #include "nodes.gen.h"
        > const char*tora::node_type2name[] = {"NODE_UNKNOWN", @{[ $nodes.map(sub ($n) { qq{"$n"} }).join(", ")} ]};
    );
}

