TODO
====

builtin functions
-----------------

stat()
alarm()
system()

builtin objects
---------------

Array#sort!()
Array#any()
Array#shuffle()
Array#reverse!()

Enumerable#reduce()
Enumerable#sort_by()

for (my $e in dir('t')) { ... }

open()
open($fname, $mode, $encoding)
file($fname).open($mode="rb", $encoding="utf-8")
File#write()
File#read(n)
File#sync()
File#seek()
File#rewind()
File#tell()

String.lc()
String.uc()
String#substr(n)
String#substr(n, m)
String#replace(regexp|str, code)
String#replace(regexp|str, str)

Regexp.quotemeta

ErrnoException?

generate document

use POSIX::Glob *;
glob('src/object/*.cc')

XSLoader()

syntax
------

 * local $FOO[$var];
 * "\u3042"
 * given-when
 * $array.sort({ $_[0] <=> $_[1] }).reverse();
 * <<'...'
 * "hogehoge $foo"
 * "hogehoge #{ 3+2 }"
 * last with label
 * next with label
 * next
 * continue
 * $PROGRAM_NAME($0)
 * fiber
 * overload(+) {
      $a + $b;
   }
 * localize STDOUT
 * local Foo::method = sub { };
 * $1, $2, $3
 * /xxx/i
 * /xxx/g
 * /xxx/x
 * /xxx/s
 * /xxx/m
 * super()

lambda
------


Pending
-------

 * $x or $y
 * $x and $y

feature
-------

  * use Test::More qw(is);
  * <DATA>
  * -n option
  * -p option
  * -i option
  * eval() with upper stack introspeciton like 'my $x=4649; eval("say($x)")'
  * [1,2,3].sort(-> $a, $b { $a <=> $b })
  * === operator?
  * ~~
  * bignum support using ttmath?
  * for (my $i=0; $i<100; $i++) { } say($i); should be fail.
  * use ICU for converting encoding.
  * Bytes class.
  * local $n
  * scope_guard { ... }
    * BOOST_SCOPE_EXIT
    * http://www.kmonos.net/alang/d/2.0/statement.html#ScopeGuardStatement
    * https://metacpan.org/module/Guard

benchmarking
------------

 * http://cpanidx.org/perlbench/
 * http://shootout.alioth.debian.org/

Library
-------

 * Socket
 * flock
 * readline
 * ANSIColor
 * HTTP client
 * HTTP server
 * B::Deparse
 * Test::More
 * dir()
 * file()

Finished
--------
  * say(($a==$b ? "ok " : "not ok ") + $counter);
  * "abc" == "def"
  * Dir.close
  * do not create scope if thre is no var definition.
  * $ENV['Foo'] = 'Bar';
  * -s
  * return if $_;
  * x if foo;
 * q{}
 * qq{}
 * last
 * $x && $y
 * $x || $y
 * __FILE__
  * __FILE__
  * statement scope
  * require
  * import
  * ENV
 * to_double()
 * caller()
 * $x ** 2
 * $x | $y
 * $x & $y
 * $x ^ $y
 * $x << $y
 * $x >> $y
 * $x % $y
  * sub f() { { say('hoge') } } f()
  * sub f() { { 1 => 2 } } f()
  * for (1..10) { say($_) }
Array#push()
Array#pop()
Array#shift()
Array#unshift()
Array#reverse()
 * *=
 * -=
 * &=
 * |=
 * ^=
 * %=
 * +=
 * say $_ for $array;
 * unless () { }
 * x unless foo;
getcwd()
 * x while y;
 * callee()
Code#file
Code#line

getpid()
getppid()
Array#join()
 * [1,2,2].map(sub { say($_) });
Array#map()
 * destructor in pure tora function
  * -x
  * DynaLoader
hex()
sqrt()
 * $foo.bar; # ignore parens.
dir('t').file($fname)
 * inheritance
String#match(regexp|str, code)
