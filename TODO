TODO
====

builtin functions
-----------------

stat()
hex()
caller()

builtin objects
---------------

Array.new()
Array#sort!()
Array#reverse()
Array#map()
Array#any()
Array#shuffle()
Array#flatten()
Array#push()
Array#pop()
Array#shift()
Array#unshift()

open()
File#write()
File#read(n)
File#sync()
File#seek()
File#rewind()
File#tell()

String#substr(n)
String#substr(n, m)
String#replace(regexp|str, code)
String#replace(regexp|str, str)
String#match(regexp|str, code)

syntax
-------

 * open($fname).read();
 * given-when
 * q{}
 * qq{}
 * say $_ for $array;
 * return if $_;
 * $array.map(^{ say($_); });
 * [1,2,2].map(sub { say($_) });
 * $array.sort({ $_[0] <=> $_[1] }).reverse();
 * lambda syntax: ^{ }
 * <<'...'
 * "hogehoge $foo"
 * "hogehoge #{ 3+2 }"
 * last
 * next
 * continue
 * __FILE__
 * $PROGRAM_NAME($0)
 * $x ** 2
 * caller()

feature
-------

  * require
  * import
  * ENV
  * <DATA>
  * -n option
  * -p option
  * -i option
  * __FILE__
  * eval() with upper stack introspeciton like 'my $x=4649; eval("say($x)")'
  * [1,2,3].sort(^{ $_[0] <=> $_[1] })
  * undef == undef
  * === operator?
  * sub f() { { say('hoge') } } f()
  * sub f() { { 1 => 2 } } f()
  * bignum support using ttmath?
  * for (1..10) { say($_) }
  * statement scope
  * for (my $i=0; $i<100; $i++) { } say($i); should be fail.

Library
-------

 * Socket
 * flock
 * readline
 * ANSIColor
 * HTTP client
 * HTTP server
 * B::Deparse
 * Test::More

Finished
--------
  * say(($a==$b ? "ok " : "not ok ") + $counter);
  * "abc" == "def"
  * Dir.close
  * do not create scope if thre is no var definition.
  * $ENV['Foo'] = 'Bar';
 * -s

